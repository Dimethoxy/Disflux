name: Build Project

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup MSVC
        if: matrix.os == 'windows-latest'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
          spectre: true

      - name: Set Up Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja -y || exit 0
          Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Name build
        shell: pwsh

      - name: Set Up Mac
        if: matrix.os == 'macos-latest'
        run: |
          brew install ninja || true
          rm -rf build || true
          mkdir build
        shell: bash

      - name: Set Up Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build
          sudo apt-get install -y \
            libasound2-dev libjack-jackd2-dev ladspa-sdk \
            libcurl4-openssl-dev libfreetype-dev libfontconfig1-dev \
            libx11-dev libxcomposite-dev libxcursor-dev libxext-dev \
            libxinerama-dev libxrandr-dev libxrender-dev \
            libwebkit2gtk-4.1-dev libglu1-mesa-dev mesa-common-dev
          rm -rf build || true
          mkdir build
        shell: bash

      - name: Configure Build on Windows
        if: matrix.os == 'windows-latest'
        run: cmake --preset "Windows Release"

      - name: Configure Build on macOS
        if: matrix.os == 'macos-latest'
        run: cmake --preset "Mac Release" -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: Configure Build on Linux
        if: matrix.os == 'ubuntu-latest'
        run: cmake --preset "Linux Release"

      - name: Build
        run: cmake --build build --config "Release"

    - name: Package Windows Artifacts
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p artifacts
          cp -r build/src/DisfluxPlugin_artefacts/Release/VST3/Disflux.vst3 artifacts/
          cp -r build/src/DisfluxPlugin_artefacts/Release/CLAP/Disflux.clap artifacts/
          zip -r artifacts/windows_artifacts.zip artifacts/*
        shell: bash

      - name: Package macOS Artifacts
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p artifacts
          cp -r build/src/DisfluxPlugin_artefacts/Release/VST3/Disflux.vst3 artifacts/
          cp -r build/src/DisfluxPlugin_artefacts/Release/CLAP/Disflux.clap artifacts/
          cp -r build/src/DisfluxPlugin_artefacts/Release/AU/Disflux.au artifacts/
          zip -r artifacts/macos_artifacts.zip artifacts/*
        shell: bash

      - name: Package Linux Artifacts
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p artifacts
          cp -r build/src/DisfluxPlugin_artefacts/Release/VST3/Disflux.vst3 artifacts/
          cp -r build/src/DisfluxPlugin_artefacts/Release/VST3/Disflux.lv2 artifacts/
          cp -r build/src/DisfluxPlugin_artefacts/Release/CLAP/Disflux.clap artifacts/
          zip -r artifacts/linux_artifacts.zip artifacts/*
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ matrix.os }}-Release
          path: |
            artifacts/windows_artifacts.zip
            artifacts/macos_artifacts.zip
            artifacts/linux_artifacts.zip

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: prerelease-${{ github.run_number }}
          release_name: Pre-release ${{ github.run_number }}
          body: |
            Build artifacts for OS: ${{ matrix.os }} and Build Type: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: prerelease-${{ github.run_number }}
          files: |
            artifacts/windows_artifacts.zip
            artifacts/macos_artifacts.zip
            artifacts/linux_artifacts.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}